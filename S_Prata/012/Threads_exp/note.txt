1_treads_exp.c
работает

---------------------------
gcc treads_exp.c
treads_exp.c

ошибка: нет файла threads.h

решение ---->>>

файл F:\MSYS2_64\mingw64\include\libxml2\libxml\threads.h скопировал в каталог включенный в поиск по умолчанию - F:\MSYS2_64\mingw64\x86_64-w64-mingw32\include

учитывая, что заголовочные файлы подключаются в threads.h через #include <libxml/имя.h>,
то запуск gcc с опцией -I
F:/Temp/C_lang/!_S_Prata/012/Threads_exp>gcc -I F:/MSYS2_64/mingw64/include/libxml2   treads_exp.c
приводит к поиску заголовочных файлов из папки /libxml2 в папке /libxml2/libxml

OK!

------------------------------------------------------------------------

Options for Directory Search
https://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html

------------------------------------------------------------------------

http://www.mingw.org/wiki/IncludePathHOWTO

Фактический путь поиска для любой конкретной установки MinGW можно определить, запустив сам компилятор с опцией "-v" ; как правило, для установки GCC-3.4.5  -

  $ gcc -v -c foo.c
-------------------------------------------------------------------------

Using Headers Provided with Locally Installed External Libraries

Использование заголовков, предоставляемых локально установленными внешними библиотеками

(опции «-I DIR» и «-L DIR») =============

Многие проекты имеют зависимости от внешних библиотек, которые не предоставляются стандартной установкой MinGW . Пользователи, которые хотят создавать приложения, предоставляемые такими проектами, должны сначала установить соответствующие обязательные библиотеки. Такие библиотеки называются «локально установленными библиотеками» , и они должны быть установлены таким образом, чтобы GCC MinGW мог легко найти как сами библиотеки, так и любые заголовочные файлы, установленные как предварительные условия для указания интерфейса для функций библиотеки.

Для некоторых пользователей установка таких внешних библиотек может рассматриваться как вызов. Как правило, и особенно в случае библиотечных пакетов, изначально разработанных для Unix-подобных платформ, такие библиотеки будут установлены в иерархию каталогов / usr / local / .... Однако, как мы видели выше, GCC MinGW не рассматривает такую ??иерархию в своих путях поиска по умолчанию, ни для заголовочных файлов, ни для библиотек. Таким образом, задача заключается в выборе стратегии установки, которая обеспечивает удовлетворительный компромисс между:

        Установка непосредственно в собственные стандартные иерархии каталогов <mingw-root> / include и <mingw-root> / lib ; это дает преимущество в том, что библиотеки и связанные с ними заголовочные файлы помещаются непосредственно в пути поиска MinGW GCC по умолчанию, поэтому на пользователя не ложится дополнительная нагрузка, добавляя дополнительные опции "-I DIR" во всех системах сборки любой проект с использованием внешней библиотеки. Тем не менее, хотя это, пожалуй, самый простой вариант, эта стратегия не лишена недостатков:
        Внешние библиотечные компоненты в иерархии файловой системы смешаны с собственными стандартными компонентами MinGW ; может быть не просто выделить их позже, если это когда-нибудь понадобится.
        Если пользователь желает поддерживать параллельные установки MinGW , скажем, в разных версиях точек выпуска, то установки внешней библиотеки необходимо будет дублировать в каждой из отдельных иерархий установки MinGW .
        Если иерархия установки MinGW очищена при подготовке к чистой переустановке, то все локально установленные внешние библиотеки также будут очищены, и, если потребуется, их придется переустановить. 
    Создание отдельной иерархии каталогов, в которую устанавливаются все пакеты внешних библиотек; это смягчает недостатки варианта (1), но имеет свои недостатки:
        Заголовочные файлы и библиотеки больше не входят в стандартные пути поиска MinGW GCC; таким образом, пользователь должен предусмотреть передачу 

соответствующих опций "-I DIR" (и связанных с ними "-L DIR" ) в GCC ====================

через системы сборки своих собственных проектов. (Это может быть уменьшено, в свою очередь, путем настройки файла спецификаций GCC , чтобы автоматически предоставлять необходимые параметры для всех вызовов GCC, или путем соответствующего определения CPATH GCC и связанных переменных среды ).
        Хотя теперь они отделены от стандартной библиотеки MinGW и компонентов заголовков, все пакеты внешних библиотек по-прежнему перемешаны друг с другом в общей иерархии установки; тем не менее, это часто считается приемлемым компромиссом. 
    В качестве варианта опции (2) создайте отдельную иерархию каталогов для каждого отдельного пакета внешней библиотеки, который будет установлен локально; это смягчает все недостатки опции (1) и смешивание пакетов опции (2), но влечет за собой альтернативное наказание:
        Как и в случае опции (2), к каждому вызову GCC должны быть добавлены соответствующие 

опции «-I DIR» и «-L DIR» ; однако, хотя для опции (2) =======================

требуется только один дополнительный путь каждого типа, для этой опции требуется дополнительный путь каждого типа для каждой развертываемой внешней библиотеки. (Хотя это все еще может быть достигнуто путем соответствующей настройки файла спецификаций GCC или путем надлежащего указания CPATH и связанных с ним переменных среды , дополнительная сложность и затраты на обслуживание могут считаться неприемлемыми для многих пользователей). 

--------------------------------------------------

Изменения в файле базовых спецификаций

GCC создаст файл спецификации с помощью следующей команды.

  gcc -dumpspecs> спецификации 

Вы можете использовать текстовый редактор по вашему выбору, чтобы проверить его. Чтобы использовать файл specs, вызовите gcc с параметром -specs = <path_to_specs_file> или поместите его в «/ mingw / lib / gcc / mingw32 / <version> / specs», чтобы заставить GCC использовать его по умолчанию, где <version> ссылается на Версия GCC установлена. 



